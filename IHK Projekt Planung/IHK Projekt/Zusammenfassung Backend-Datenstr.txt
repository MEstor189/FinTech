ğŸ§© Zusammenfassung: Backend-Datenstruktur
ğŸ“¤ Request (Simulation starten)
Symbol + Zeitraum

Investitionsbetrag pro Trade

Liste von Strategien mit:

Strategie-Namen

Entry- und Exit-Typen + Parametern

ğŸ‘‰ Wird genutzt fÃ¼r: POST /api/simulation oder Ã¤hnlich

ğŸ“¥ Response (Simulationsergebnis)
Beinhaltet:

ğŸ§¾ Allgemein:
symbol, startDate, endDate, investmentPerTrade

ğŸ“ˆ stockData[]
Kursdaten Ã¼ber Zeitraum

Felder: date, openPrice, closePrice, highPrice, lowPrice, volumen

ğŸ‘‰ FÃ¼r: PriceChart

ğŸ“Š strategies[]
FÃ¼r jede angefragte Strategie:

strategyName, entryStrategyType, exitStrategyType

entryParams, exitParams

tradeCount

totalProfit

averageHoldingDays

trades[]: Liste abgeschlossener Trades inkl.:

Entry-/Exit-Datum & Preis

Absolute/Prozentuale Profite

Holding Days

ğŸ‘‰ FÃ¼r:

Trades & Markierungen im PriceChart

PerformanceChart (Ã¼ber profitPercent aufsummiert)

CompareChart (Metriken)

ğŸ§  Was wir daraus im Frontend extrahieren:
Ziel-Komponente	Datenquelle	Was extrahieren
PriceChart	stockData[], trades[] pro Strategie	Preisverlauf + Trade-Punkte
PerformanceChart	trades[].profitPercent	Kumulierte %-VerlÃ¤ufe pro Strategie
StrategyCompareChart	totalProfit, tradeCount, averageHoldingDays, winRate, drawdown (berechnen)	Strategie-Metriken